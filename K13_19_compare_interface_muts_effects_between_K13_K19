library(data.table)
library(krasddpcams)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggrepel)

# ===== Read data =====
ddG1 <- krasddpcams__read_ddG(ddG = "C:/Users/36146/OneDrive - USTC/DryLab/MoCHI_8binders_l2_e6_RA_old_new_merge_at_mochi_20250901/task_901/weights/weights_Binding_K13.txt", assay_sele = "K13")
ddG2 <- krasddpcams__read_ddG(ddG = "C:/Users/36146/OneDrive - USTC/DryLab/MoCHI_8binders_l2_e6_RA_old_new_merge_at_mochi_20250901/task_901/weights/weights_Binding_K19.txt", assay_sele = "K19")

K13_binding_interface_site <- c(98, 107, 101, 102, 99, 136, 68, 95, 137, 94, 133, 90, 129, 87, 91, 88)
K19_binding_interface_site <- c(98, 107, 101, 102, 99, 136, 68, 95, 137, 94, 133, 90, 129, 87, 91, 88)

ddG1_K13 <- ddG1[Pos %in% K13_binding_interface_site, c(1:3, 23:27)]
ddG2_K19 <- ddG2[Pos %in% K19_binding_interface_site, c(1:3, 23:27)]

ddG1_dc <- ddG1_K13 %>%
  spread(key = assay, value = `mean_kcal/mol`)

ddG2_dc <- ddG2_K19 %>%
  spread(key = assay, value = `mean_kcal/mol`)

ddG_dc <- merge(ddG1_dc, ddG2_dc, by = c("mt", "Pos_real"), all = TRUE)

# ===== Calculate correlation =====
correlation_coefficient <- cor(ddG_dc$K13, ddG_dc$K19, use = "complete.obs")

# ===== Identify points deviating from correlation =====
# 1. Linear fitting
fit <- lm(K19 ~ K13, data = ddG_dc)

# 2. Calculate absolute residuals - directly measure deviation from linear relationship
ddG_dc$abs_residual <- abs(resid(fit))

# 3. Label top deviating points (e.g., top 10)
num_outliers <- 10
ddG_dc <- ddG_dc %>%
  mutate(
    outlier_rank = rank(-abs_residual, ties.method = "first"),
    is_outlier = outlier_rank <= num_outliers
  )

# Get outliers to label
outliers_to_label <- ddG_dc %>%
  filter(is_outlier == TRUE) %>%
  arrange(desc(abs_residual))

# ===== Plot (with error bars) =====
ggplot(ddG_dc, aes(x = K13, y = K19)) +
  # Add regression line
  geom_smooth(method = "lm", se = FALSE, color = "black", linewidth = 0.8, alpha = 0.5) +
  
  # Add error bars for all points (light gray, semi-transparent)
  geom_errorbar(aes(ymin = K19 - `std_kcal/mol.y`, ymax = K19 + `std_kcal/mol.y`),
                width = 0.05, color = "grey70", alpha = 0.3) +
  geom_errorbarh(aes(xmin = K13 - `std_kcal/mol.x`, xmax = K13 + `std_kcal/mol.x`),
                 height = 0.05, color = "grey70", alpha = 0.3) +
  
  # All points
  geom_point(color = "#75C2F6", alpha = 0.8, size = 2) +
  
  # Add more prominent error bars for outliers
  geom_errorbar(data = outliers_to_label,
                aes(ymin = K19 - `std_kcal/mol.y`, ymax = K19 + `std_kcal/mol.y`),
                width = 0.08, color = "#FF6A56", alpha = 0.6, size = 0.8) +
  geom_errorbarh(data = outliers_to_label,
                 aes(xmin = K13 - `std_kcal/mol.x`, xmax = K13 + `std_kcal/mol.x`),
                 height = 0.08, color = "#FF6A56", alpha = 0.6, size = 0.8) +
  
  # Highlight outliers
  geom_point(data = outliers_to_label, color = "#FF6A56", size = 2.5) +
  
  # Label outliers (with residual information)
  geom_text_repel(
    data = outliers_to_label,
    aes(label = paste0(mt, " (Δ=", round(abs_residual, 2), ")")),
    color = "#FF6A56",
    size = 2.5,
    max.overlaps = Inf,
    box.padding = 0.7,
    point.padding = 0.3,
    segment.color = "#FF6A56",
    segment.alpha = 0.3
  ) +
  
  # Add statistical information
  annotate("text",
           x = min(ddG_dc$K13, na.rm = TRUE),
           y = max(ddG_dc$K19, na.rm = TRUE),
           label = paste(
             "Pearson r =", round(correlation_coefficient, 3), "\n",
             "Top", num_outliers, "deviating points labeled\n",
             "Error bars show ±1 SD"
           ),
           hjust = 0, vjust = 1, size = 2.5
  ) +
  
  labs(
    title = "Correlation Analysis with Error Bars - Most Deviating Points",
    x = "ΔΔG for K13 Binding Interface Mutations (kcal/mol)",
    y = "ΔΔG for K19 Binding Interface Mutations (kcal/mol)",
    caption = "Error bars represent standard deviation. 
Points with large residuals that cannot be explained by measurement error are likely true biological outliers."
  ) +
  theme_minimal() +
  theme(
    panel.grid = element_blank(),
    axis.line = element_line(size = 1),
    axis.ticks = element_line(size = 1),
    axis.text = element_text(size = 8),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),  
    axis.title = element_text(size = 8),
    plot.title = element_text(size = 8),
    plot.caption = element_text(size = 8, color = "grey50", hjust = 0),
    legend.text = element_text(size = 8),
    legend.title = element_text(size = 8)
  )

# ===== Output detailed outlier information (with error information) =====
cat("=== Top", num_outliers, "Most Deviating Points with Error Information ===\n")
outliers_info <- outliers_to_label %>%
  mutate(
    # Calculate error range
    K13_error_range = 2 * `std_kcal/mol.x`,  # ±1 SD range
    K19_error_range = 2 * `std_kcal/mol.y`,
    # Determine if likely noise: if residual is within error range, likely noise
    likely_noise = abs_residual < (K13_error_range + K19_error_range) / 2
  ) %>%
  select(mt, Pos_real, K13, `std_kcal/mol.x`, K19, `std_kcal/mol.y`, 
         abs_residual, K13_error_range, K19_error_range, likely_noise) %>%
  arrange(desc(abs_residual))

print(outliers_info)

# Count outliers that might be due to noise
noise_count <- sum(outliers_info$likely_noise, na.rm = TRUE)
cat("\n=== Summary ===\n")
cat("Number of outliers that might be due to measurement noise:", noise_count, "/", num_outliers, "\n")
cat("Number of outliers likely representing true biological deviation:", num_outliers - noise_count, "/", num_outliers, "\n")

# Save plot
ggplot2::ggsave("C:/Users/36146/OneDrive - USTC/Manuscripts/K13_K19/figures/figure2/20251011/scatter_plot_compare_K13_K19_binding_interface_label_outlier_per_mutations.pdf", 
                device = cairo_pdf, height = 6, width = 6, dpi = 300)
